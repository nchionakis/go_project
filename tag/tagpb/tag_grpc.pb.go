// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: tag.proto

package tagpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagServiceClient is the opcuaclient API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/tag.TagService/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the opcuaserver API for TagService service.
// All implementations must embed UnimplementedTagServiceServer
// for forward compatibility
type TagServiceServer interface {
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	mustEmbedUnimplementedTagServiceServer()
}

// UnimplementedTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (UnimplementedTagServiceServer) Tag(context.Context, *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (UnimplementedTagServiceServer) mustEmbedUnimplementedTagServiceServer() {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tag",
			Handler:    _TagService_Tag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}

// StreamTagServiceClient is the opcuaclient API for StreamTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTagServiceClient interface {
	StreamTag(ctx context.Context, in *StreamTagRequest, opts ...grpc.CallOption) (StreamTagService_StreamTagClient, error)
}

type streamTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTagServiceClient(cc grpc.ClientConnInterface) StreamTagServiceClient {
	return &streamTagServiceClient{cc}
}

func (c *streamTagServiceClient) StreamTag(ctx context.Context, in *StreamTagRequest, opts ...grpc.CallOption) (StreamTagService_StreamTagClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTagService_ServiceDesc.Streams[0], "/tag.StreamTagService/StreamTag", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTagServiceStreamTagClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTagService_StreamTagClient interface {
	Recv() (*StreamTagResponse, error)
	grpc.ClientStream
}

type streamTagServiceStreamTagClient struct {
	grpc.ClientStream
}

func (x *streamTagServiceStreamTagClient) Recv() (*StreamTagResponse, error) {
	m := new(StreamTagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTagServiceServer is the opcuaserver API for StreamTagService service.
// All implementations must embed UnimplementedStreamTagServiceServer
// for forward compatibility
type StreamTagServiceServer interface {
	StreamTag(*StreamTagRequest, StreamTagService_StreamTagServer) error
	mustEmbedUnimplementedStreamTagServiceServer()
}

// UnimplementedStreamTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamTagServiceServer struct {
}

func (UnimplementedStreamTagServiceServer) StreamTag(*StreamTagRequest, StreamTagService_StreamTagServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTag not implemented")
}
func (UnimplementedStreamTagServiceServer) mustEmbedUnimplementedStreamTagServiceServer() {}

// UnsafeStreamTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTagServiceServer will
// result in compilation errors.
type UnsafeStreamTagServiceServer interface {
	mustEmbedUnimplementedStreamTagServiceServer()
}

func RegisterStreamTagServiceServer(s grpc.ServiceRegistrar, srv StreamTagServiceServer) {
	s.RegisterService(&StreamTagService_ServiceDesc, srv)
}

func _StreamTagService_StreamTag_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTagRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTagServiceServer).StreamTag(m, &streamTagServiceStreamTagServer{stream})
}

type StreamTagService_StreamTagServer interface {
	Send(*StreamTagResponse) error
	grpc.ServerStream
}

type streamTagServiceStreamTagServer struct {
	grpc.ServerStream
}

func (x *streamTagServiceStreamTagServer) Send(m *StreamTagResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamTagService_ServiceDesc is the grpc.ServiceDesc for StreamTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.StreamTagService",
	HandlerType: (*StreamTagServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTag",
			Handler:       _StreamTagService_StreamTag_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tag.proto",
}

// StreamTagEveryoneServiceClient is the opcuaclient API for StreamTagEveryoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTagEveryoneServiceClient interface {
	StreamTagEveryone(ctx context.Context, opts ...grpc.CallOption) (StreamTagEveryoneService_StreamTagEveryoneClient, error)
}

type streamTagEveryoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTagEveryoneServiceClient(cc grpc.ClientConnInterface) StreamTagEveryoneServiceClient {
	return &streamTagEveryoneServiceClient{cc}
}

func (c *streamTagEveryoneServiceClient) StreamTagEveryone(ctx context.Context, opts ...grpc.CallOption) (StreamTagEveryoneService_StreamTagEveryoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTagEveryoneService_ServiceDesc.Streams[0], "/tag.StreamTagEveryoneService/StreamTagEveryone", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTagEveryoneServiceStreamTagEveryoneClient{stream}
	return x, nil
}

type StreamTagEveryoneService_StreamTagEveryoneClient interface {
	Send(*StreamTagEveryoneRequest) error
	Recv() (*StreamTagEveryoneResponse, error)
	grpc.ClientStream
}

type streamTagEveryoneServiceStreamTagEveryoneClient struct {
	grpc.ClientStream
}

func (x *streamTagEveryoneServiceStreamTagEveryoneClient) Send(m *StreamTagEveryoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTagEveryoneServiceStreamTagEveryoneClient) Recv() (*StreamTagEveryoneResponse, error) {
	m := new(StreamTagEveryoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTagEveryoneServiceServer is the opcuaserver API for StreamTagEveryoneService service.
// All implementations must embed UnimplementedStreamTagEveryoneServiceServer
// for forward compatibility
type StreamTagEveryoneServiceServer interface {
	StreamTagEveryone(StreamTagEveryoneService_StreamTagEveryoneServer) error
	mustEmbedUnimplementedStreamTagEveryoneServiceServer()
}

// UnimplementedStreamTagEveryoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamTagEveryoneServiceServer struct {
}

func (UnimplementedStreamTagEveryoneServiceServer) StreamTagEveryone(StreamTagEveryoneService_StreamTagEveryoneServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTagEveryone not implemented")
}
func (UnimplementedStreamTagEveryoneServiceServer) mustEmbedUnimplementedStreamTagEveryoneServiceServer() {
}

// UnsafeStreamTagEveryoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTagEveryoneServiceServer will
// result in compilation errors.
type UnsafeStreamTagEveryoneServiceServer interface {
	mustEmbedUnimplementedStreamTagEveryoneServiceServer()
}

func RegisterStreamTagEveryoneServiceServer(s grpc.ServiceRegistrar, srv StreamTagEveryoneServiceServer) {
	s.RegisterService(&StreamTagEveryoneService_ServiceDesc, srv)
}

func _StreamTagEveryoneService_StreamTagEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTagEveryoneServiceServer).StreamTagEveryone(&streamTagEveryoneServiceStreamTagEveryoneServer{stream})
}

type StreamTagEveryoneService_StreamTagEveryoneServer interface {
	Send(*StreamTagEveryoneResponse) error
	Recv() (*StreamTagEveryoneRequest, error)
	grpc.ServerStream
}

type streamTagEveryoneServiceStreamTagEveryoneServer struct {
	grpc.ServerStream
}

func (x *streamTagEveryoneServiceStreamTagEveryoneServer) Send(m *StreamTagEveryoneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTagEveryoneServiceStreamTagEveryoneServer) Recv() (*StreamTagEveryoneRequest, error) {
	m := new(StreamTagEveryoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTagEveryoneService_ServiceDesc is the grpc.ServiceDesc for StreamTagEveryoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTagEveryoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.StreamTagEveryoneService",
	HandlerType: (*StreamTagEveryoneServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTagEveryone",
			Handler:       _StreamTagEveryoneService_StreamTagEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tag.proto",
}
